services:
  redis:
    image: redis
    container_name: imagepipe-redis
    ports:
      - "6379:6379"

  gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: imagepipe-gateway
    ports:
      - "5000:5000"
    command: python gateway/app.py
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./instance:/app/instance

  worker-compress:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: worker-compress
    command: celery -A services.convert.convert_worker worker -n convert@%h -Q convert_queue --loglevel=info --pool=solo
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./instance:/app/instance

  worker-filter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: worker-filter
    command: celery -A services.filter.filter_worker worker -n filter@%h -Q filter_queue --loglevel=info --pool=solo
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./instance:/app/instance

  worker-ocr:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: worker-ocr
    command: celery -A services.ocr.ocr_worker worker -n ocr@%h -Q ocr_queue --loglevel=info --pool=solo
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./instance:/app/instance
  
  worker-cleaner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: worker-cleaner
    command: celery -A services.cleaner.cleaner_worker worker -n cleaner@%h -Q cleaner_queue --loglevel=info --pool=solo
    depends_on:
      - redis
      - minio
    volumes:
      - ./uploads:/app/uploads
      - ./instance:/app/instance

  minio:
    image: minio/minio
    container_name: imagepipe-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./minio_data:/data
    command: server /data --console-address ":9001"

  # ui:
  #   build:
  #     context: ./imagepipe-ui
  #     dockerfile: Dockerfile
  #   container_name: imagepipe-ui
  #   depends_on:
  #     - gateway
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./imagepipe-ui/nginx.conf:/etc/nginx/nginx.conf:ro
  #   stdin_open: true
  #   tty: true

  # nginx:
  #   image: nginx:latest
  #   container_name: imagepipe-nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./imagepipe-ui/build:/usr/share/nginx/html
  #   depends_on:
  #     - ui
  #     - gateway